// Mocks generated by Mockito 5.4.6 from annotations
// in agua_viva/test/widgets/dashboard_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i8;

import 'package:agua_viva/models/assessment_model.dart' as _i2;
import 'package:agua_viva/models/spring_model.dart' as _i5;
import 'package:agua_viva/services/assessment_service.dart' as _i3;
import 'package:agua_viva/services/auth_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSpringAssessment_0 extends _i1.SmartFake
    implements _i2.SpringAssessment {
  _FakeSpringAssessment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AssessmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssessmentService extends _i1.Mock implements _i3.AssessmentService {
  MockAssessmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.Spring>> get springsStream => (super.noSuchMethod(
        Invocation.getter(#springsStream),
        returnValue: _i4.Stream<List<_i5.Spring>>.empty(),
      ) as _i4.Stream<List<_i5.Spring>>);

  @override
  _i4.Stream<List<_i2.SpringAssessment>> get assessmentsStream =>
      (super.noSuchMethod(
        Invocation.getter(#assessmentsStream),
        returnValue: _i4.Stream<List<_i2.SpringAssessment>>.empty(),
      ) as _i4.Stream<List<_i2.SpringAssessment>>);

  @override
  _i4.Future<void> syncOfflineData() => (super.noSuchMethod(
        Invocation.method(
          #syncOfflineData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.SpringAssessment> createAssessment(
          Map<String, dynamic>? assessmentData) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAssessment,
          [assessmentData],
        ),
        returnValue:
            _i4.Future<_i2.SpringAssessment>.value(_FakeSpringAssessment_0(
          this,
          Invocation.method(
            #createAssessment,
            [assessmentData],
          ),
        )),
      ) as _i4.Future<_i2.SpringAssessment>);

  @override
  _i4.Future<String> saveAssessment(_i2.SpringAssessment? assessment) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAssessment,
          [assessment],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #saveAssessment,
            [assessment],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> uploadPhoto(
    String? filePath,
    String? photoPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadPhoto,
          [
            filePath,
            photoPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.SpringAssessment?> getAssessmentById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssessmentById,
          [id],
        ),
        returnValue: _i4.Future<_i2.SpringAssessment?>.value(),
      ) as _i4.Future<_i2.SpringAssessment?>);

  @override
  _i4.Future<List<_i2.SpringAssessment>> getAssessmentsByOwnerCpf(
          String? cpf) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssessmentsByOwnerCpf,
          [cpf],
        ),
        returnValue: _i4.Future<List<_i2.SpringAssessment>>.value(
            <_i2.SpringAssessment>[]),
      ) as _i4.Future<List<_i2.SpringAssessment>>);

  @override
  _i4.Future<List<_i2.SpringAssessment>> getAllAssessments() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAssessments,
          [],
        ),
        returnValue: _i4.Future<List<_i2.SpringAssessment>>.value(
            <_i2.SpringAssessment>[]),
      ) as _i4.Future<List<_i2.SpringAssessment>>);

  @override
  _i4.Future<_i2.SpringAssessment> updateAssessment(
    String? id,
    Map<String, dynamic>? assessmentData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAssessment,
          [
            id,
            assessmentData,
          ],
        ),
        returnValue:
            _i4.Future<_i2.SpringAssessment>.value(_FakeSpringAssessment_0(
          this,
          Invocation.method(
            #updateAssessment,
            [
              id,
              assessmentData,
            ],
          ),
        )),
      ) as _i4.Future<_i2.SpringAssessment>);

  @override
  _i4.Future<void> deleteAssessment(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAssessment,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateAssessmentStatus(
    String? id,
    String? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAssessmentStatus,
          [
            id,
            status,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i7.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<bool> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> signInProprietario(
    String? email,
    String? senha,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInProprietario,
          [
            email,
            senha,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
